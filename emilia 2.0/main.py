import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import filters
from aiogram.utils import exceptions
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, CHANNEL_ID, CHANNEL_LINK

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SubscriptionChecker:
    def __init__(self, bot):
        self.bot = bot
        self.cache = {}

    async def check_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        if user_id in self.cache:
            return self.cache[user_id]

        try:
            member = await self.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            result = member.status not in ['left', 'kicked']
            self.cache[user_id] = result
            return result
            
        except exceptions.BadRequest as e:
            if "bot is not a member" in str(e).lower():
                logger.error("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞!")
            return True
        except exceptions.ChatNotFound:
            logger.error("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return True
        except exceptions.Unauthorized:
            logger.error("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except exceptions.TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
            return True

    async def send_subscription_request(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"""
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK))
        keyboard.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
        
        await message.answer(
            "üìõ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

class AnimeBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(self.bot)
        self.sub_checker = SubscriptionChecker(self.bot)
        self.sfw_genres = ["waifu", "neko", "shinobu", "megumin"]
        self.nsfw_genres = ["waifu", "neko", "trap"]
        self.nsfw_enabled = False

    async def on_startup(self, dispatcher):
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    async def on_shutdown(self, dispatcher):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_main_menu(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        genres = self.nsfw_genres if self.nsfw_enabled else self.sfw_genres
        
        for genre in genres:
            keyboard.add(types.KeyboardButton(genre.capitalize()))
            
        nsfw_text = "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW" if self.nsfw_enabled else "üîû –í–∫–ª—é—á–∏—Ç—å NSFW"
        keyboard.add(types.KeyboardButton(nsfw_text))
        keyboard.add(types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"))
        
        return keyboard

    def register_handlers(self):
        @self.dp.message_handler(commands=['start', 'menu'])
        async def cmd_start(message: types.Message):
            if not await self.sub_checker.check_subscription(message.from_user.id):
                await self.sub_checker.send_subscription_request(message)
                return
                
            await message.answer(
                "üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                reply_markup=self.get_main_menu()
            )

        @self.dp.callback_query_handler(text="check_sub")
        async def check_sub_callback(call: types.CallbackQuery):
            if await self.sub_checker.check_subscription(call.from_user.id):
                await call.message.delete()
                await call.message.answer(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                    reply_markup=self.get_main_menu()
                )
            else:
                await call.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)

        @self.dp.message_handler(lambda m: m.text in ["üîû –í–∫–ª—é—á–∏—Ç—å NSFW", "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW"])
        async def toggle_nsfw(message: types.Message):
            self.nsfw_enabled = not self.nsfw_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if self.nsfw_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await message.answer(
                f"NSFW —Ä–µ–∂–∏–º {status}",
                reply_markup=self.get_main_menu()
            )

        @self.dp.message_handler(lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        async def refresh_menu(message: types.Message):
            await cmd_start(message)

        @self.dp.message_handler()
        async def handle_genre(message: types.Message):
            if not await self.sub_checker.check_subscription(message.from_user.id):
                await self.sub_checker.send_subscription_request(message)
                return
                
            genres = self.nsfw_genres if self.nsfw_enabled else self.sfw_genres
            genre = message.text.lower()
            
            if genre not in [g.lower() for g in genres]:
                await message.answer("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –º–µ–Ω—é")
                return
                
            await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    def run(self):
        self.register_handlers()
        from aiogram import executor
        executor.start_polling(
            self.dp,
            on_startup=self.on_startup,
            on_shutdown=self.on_shutdown,
            skip_updates=True
        )

if __name__ == '__main__':
    bot = AnimeBot()
    bot.run()
