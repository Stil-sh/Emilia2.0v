import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError
from config import BOT_TOKEN, CHANNEL_ID, CHANNEL_LINK

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SubscriptionChecker:
    def __init__(self, bot):
        self.bot = bot
        self.cache = {}

    async def check_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        if user_id in self.cache:
            return self.cache[user_id]

        try:
            member = await self.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            result = member.status not in ['left', 'kicked']
            self.cache[user_id] = result
            return result
            
        except TelegramBadRequest as e:
            if "bot is not a member" in str(e).lower():
                logger.error("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞!")
            return True
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
            return True

    async def send_subscription_request(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
        ])
        
        await message.answer(
            "üìõ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

class AnimeBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(bot=self.bot)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –≤ Dispatcher
        self.sub_checker = SubscriptionChecker(self.bot)
        self.sfw_genres = ["waifu", "neko", "shinobu", "megumin"]
        self.nsfw_genres = ["waifu", "neko", "trap"]
        self.nsfw_enabled = False

    async def on_startup(self):
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    async def on_shutdown(self):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_main_menu(self):
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=genre.capitalize()) for genre in 
                 (self.nsfw_genres if self.nsfw_enabled else self.sfw_genres)],
                [
                    types.KeyboardButton(
                        text="üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW" if self.nsfw_enabled else "üîû –í–∫–ª—é—á–∏—Ç—å NSFW"
                    ),
                    types.KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
                ]
            ],
            resize_keyboard=True
        )
        return keyboard

    def register_handlers(self):
        @self.dp.message(Command("start", "menu"))
        async def cmd_start(message: types.Message):
            if not await self.sub_checker.check_subscription(message.from_user.id):
                await self.sub_checker.send_subscription_request(message)
                return
                
            await message.answer(
                "üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                reply_markup=self.get_main_menu()
            )

        @self.dp.callback_query(lambda c: c.data == "check_sub")
        async def check_sub_callback(callback: types.CallbackQuery):
            if await self.sub_checker.check_subscription(callback.from_user.id):
                await callback.message.delete()
                await callback.message.answer(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                    reply_markup=self.get_main_menu()
                )
            else:
                await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)

        @self.dp.message(
            lambda m: m.text in ["üîû –í–∫–ª—é—á–∏—Ç—å NSFW", "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW"]
        )
        async def toggle_nsfw(message: types.Message):
            self.nsfw_enabled = not self.nsfw_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if self.nsfw_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await message.answer(
                f"NSFW —Ä–µ–∂–∏–º {status}",
                reply_markup=self.get_main_menu()
            )

        @self.dp.message(lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        async def refresh_menu(message: types.Message):
            await cmd_start(message)

        @self.dp.message()
        async def handle_genre(message: types.Message):
            if not await self.sub_checker.check_subscription(message.from_user.id):
                await self.sub_checker.send_subscription_request(message)
                return
                
            genres = self.nsfw_genres if self.nsfw_enabled else self.sfw_genres
            genre = message.text.lower()
            
            if genre not in [g.lower() for g in genres]:
                await message.answer("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –º–µ–Ω—é")
                return
                
            await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    async def run(self):
        await self.on_startup()
        self.register_handlers()
        await self.dp.start_polling(self.bot)
        await self.on_shutdown()

if __name__ == '__main__':
    bot = AnimeBot()
    import asyncio
    asyncio.run(bot.run())
