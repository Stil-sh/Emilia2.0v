import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, ADMIN_ID
import aiohttp
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY, 
                   nsfw_enabled BOOLEAN DEFAULT FALSE)''')
conn.commit()

# –ñ–∞–Ω—Ä—ã
SFW_GENRES = {
    "waifu": "–î–µ–≤—É—à–∫–∏", 
    "neko": "–ù–µ–∫–æ",
    "shinobu": "–®–∏–Ω–æ–±—É",
    "megumin": "–ú–µ–≥—É–º–∏–Ω"
}

NSFW_GENRES = {
    "waifu": "–î–µ–≤—É—à–∫–∏ (18+)",
    "neko": "–ù–µ–∫–æ (18+)",
    "trap": "–¢—Ä–∞–ø (18+)",
    "blowjob": "–ë–î–°–ú (18+)"
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id):
    cursor.execute('SELECT nsfw_enabled FROM users WHERE user_id = ?', (user_id,))
    nsfw_status = cursor.fetchone()[0] if cursor.fetchone() else False
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∂–∞–Ω—Ä—ã
    genres = NSFW_GENRES if nsfw_status else SFW_GENRES
    for genre, label in genres.items():
        keyboard.insert(InlineKeyboardButton(label, callback_data=f"genre_{genre}"))
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    mode_button = InlineKeyboardButton(
        "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW" if nsfw_status else "üîû –í–∫–ª—é—á–∏—Ç—å NSFW", 
        callback_data="toggle_nsfw"
    )
    keyboard.add(mode_button)
    keyboard.add(InlineKeyboardButton("üìù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="t.me/username"))
    
    return keyboard

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def get_image(genre, nsfw=False):
    category = "nsfw" if nsfw else "sfw"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.waifu.pics/{category}/{genre}") as resp:
                data = await resp.json()
                return data['url']
    except Exception as e:
        logger.error(f"API error: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    await message.answer("üéå –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=get_main_keyboard(user_id))

@dp.callback_query_handler(lambda call: call.data.startswith('genre_'))
async def send_image(call: types.CallbackQuery):
    user_id = call.from_user.id
    genre = call.data.split('_')[1]
    
    cursor.execute('SELECT nsfw_enabled FROM users WHERE user_id = ?', (user_id,))
    nsfw_status = cursor.fetchone()[0] if cursor.fetchone() else False
    
    image_url = await get_image(genre, nsfw_status)
    if image_url:
        await bot.send_photo(user_id, image_url, reply_markup=get_main_keyboard(user_id))
    else:
        await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query_handler(lambda call: call.data == 'toggle_nsfw')
async def toggle_nsfw(call: types.CallbackQuery):
    user_id = call.from_user.id
    cursor.execute('SELECT nsfw_enabled FROM users WHERE user_id = ?', (user_id,))
    current_status = cursor.fetchone()[0] if cursor.fetchone() else False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è NSFW
    if not current_status:
        await bot.send_message(
            user_id, 
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç:",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ú–Ω–µ –µ—Å—Ç—å 18", callback_data="confirm_age")
            )
        )
        return
    
    cursor.execute('UPDATE users SET nsfw_enabled = ? WHERE user_id = ?', (not current_status, user_id))
    conn.commit()
    await call.message.edit_reply_markup(get_main_keyboard(user_id))

@dp.callback_query_handler(lambda call: call.data == 'confirm_age')
async def confirm_age(call: types.CallbackQuery):
    user_id = call.from_user.id
    cursor.execute('UPDATE users SET nsfw_enabled = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    await call.message.delete()
    await call.message.answer("–†–µ–∂–∏–º NSFW –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=get_main_keyboard(user_id))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
