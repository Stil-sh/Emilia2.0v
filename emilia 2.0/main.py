import logging
import aiohttp
import json
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import filters
from aiogram.utils import exceptions
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, CHANNEL_ID, CHANNEL_LINK

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SubscriptionChecker:
    def __init__(self, bot):
        self.bot = bot
        self.cache = {}

    async def check_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            member = await self.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            return member.status not in ['left', 'kicked']
        except exceptions.BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    async def send_subscription_request(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"""
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üëâ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø üëà", url=CHANNEL_LINK),
            InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø", callback_data="check_sub")
        )
        
        await message.answer(
            "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
            f"{CHANNEL_LINK}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø</b>",
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

class ScrolllerAPI:
    def __init__(self):
        self.session = None

    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        self.session = aiohttp.ClientSession()

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        if self.session:
            await self.session.close()

    async def get_images(self, subreddit: str, nsfw: bool = False, count: int = 1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å—É–±—Ä–µ–¥–¥–∏—Ç–∞ –Ω–∞ Scrolller"""
        if not self.session:
            await self.init_session()

        query = {
            "query": """
                query SubredditQuery(
                    $url: String!
                    $filter: SubredditPostFilter
                    $iterator: String
                ) {
                    getSubreddit(url: $url) {
                        children(
                            limit: %d
                            filter: $filter
                            iterator: $iterator
                        ) {
                            items {
                                mediaSources {
                                    url
                                }
                                title
                                url
                            }
                        }
                    }
                }
            """ % count,
            "variables": {
                "url": f"/r/{subreddit}",
                "filter": {
                    "nsfw": nsfw
                }
            }
        }

        try:
            async with self.session.post(
                "https://api.scrolller.com/api/v2/graphql",
                headers={
                    "Content-Type": "application/json",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                },
                data=json.dumps(query)
            ) as response:
                if response.status != 200:
                    logger.error(f"Scrolller API error: {response.status}")
                    return None

                data = await response.json()
                posts = data.get('data', {}).get('getSubreddit', {}).get('children', {}).get('items', [])
                
                images = []
                for post in posts:
                    if post.get('mediaSources'):
                        for media in post['mediaSources']:
                            if media['url'].endswith(('.jpg', '.jpeg', '.png', '.gif')):
                                images.append({
                                    'url': media['url'],
                                    'title': post.get('title', ''),
                                    'post_url': post.get('url', '')
                                })
                return images

        except Exception as e:
            logger.error(f"Error fetching from Scrolller: {e}")
            return None

class AnimeBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(self.bot)
        self.sub_checker = SubscriptionChecker(self.bot)
        self.scrolller = ScrolllerAPI()
        self.sfw_subreddits = ["awwnime", "animewallpaper", "moescape"]
        self.nsfw_subreddits = ["animelegs", "animelegwear", "animearmpits"]
        self.nsfw_enabled = False

    async def on_startup(self, dispatcher):
        await self.scrolller.init_session()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    async def on_shutdown(self, dispatcher):
        await self.scrolller.close_session()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def is_subscribed(self, message: types.Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"""
        if not await self.sub_checker.check_subscription(message.from_user.id):
            await self.sub_checker.send_subscription_request(message)
            return False
        return True

    def get_main_menu(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        subreddits = self.nsfw_subreddits if self.nsfw_enabled else self.sfw_subreddits
        for sub in subreddits:
            keyboard.add(types.KeyboardButton(f"/{sub}"))
            
        nsfw_text = "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW" if self.nsfw_enabled else "üîû –í–∫–ª—é—á–∏—Ç—å NSFW"
        keyboard.add(types.KeyboardButton(nsfw_text))
        keyboard.add(types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"))
        
        return keyboard

    async def send_random_image(self, message: types.Message, subreddit: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—É–±—Ä–µ–¥–¥–∏—Ç–∞"""
        if not await self.is_subscribed(message):
            return
            
        loading_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Scrolller...")
        
        images = await self.scrolller.get_images(
            subreddit=subreddit,
            nsfw=self.nsfw_enabled,
            count=5
        )
        
        if not images:
            await loading_msg.edit_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        image = images[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        
        try:
            await self.bot.send_photo(
                chat_id=message.chat.id,
                photo=image['url'],
                caption=f"üé® {image.get('title', '')}\n"
                       f"üîó [–ò—Å—Ç–æ—á–Ω–∏–∫]({image.get('post_url', '')})\n"
                       f"üîû NSFW: {'–î–∞' if self.nsfw_enabled else '–ù–µ—Ç'}",
                parse_mode="Markdown",
                reply_markup=self.get_main_menu()
            )
            await loading_msg.delete()
        except Exception as e:
            logger.error(f"Error sending image: {e}")
            await loading_msg.edit_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def register_handlers(self):
        @self.dp.message_handler(commands=['start', 'menu'])
        async def cmd_start(message: types.Message):
            if not await self.is_subscribed(message):
                return
                
            await message.answer(
                "üéå <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∏–º–µ –±–æ—Ç!</b>\n"
                "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é:",
                reply_markup=self.get_main_menu(),
                parse_mode="HTML"
            )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è SFW —Å—É–±—Ä–µ–¥–¥–∏—Ç–æ–≤
        for sub in self.sfw_subreddits:
            @self.dp.message_handler(commands=[sub])
            async def handle_sfw_sub(message: types.Message):
                if self.nsfw_enabled:
                    await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ NSFW —Ä–µ–∂–∏–º!")
                    return
                subreddit = message.text[1:]  # –£–±–∏—Ä–∞–µ–º / –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                await self.send_random_image(message, subreddit)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è NSFW —Å—É–±—Ä–µ–¥–¥–∏—Ç–æ–≤
        for sub in self.nsfw_subreddits:
            @self.dp.message_handler(commands=[sub])
            async def handle_nsfw_sub(message: types.Message):
                if not self.nsfw_enabled:
                    await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ NSFW —Ä–µ–∂–∏–º!")
                    return
                subreddit = message.text[1:]  # –£–±–∏—Ä–∞–µ–º / –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                await self.send_random_image(message, subreddit)

        @self.dp.message_handler(lambda m: m.text in ["üîû –í–∫–ª—é—á–∏—Ç—å NSFW", "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW"])
        async def toggle_nsfw(message: types.Message):
            if not await self.is_subscribed(message):
                return
                
            self.nsfw_enabled = not self.nsfw_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if self.nsfw_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await message.answer(
                f"üîû NSFW —Ä–µ–∂–∏–º {status}",
                reply_markup=self.get_main_menu()
            )

        @self.dp.message_handler(lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        async def refresh_menu(message: types.Message):
            await cmd_start(message)

        @self.dp.callback_query_handler(text="check_sub")
        async def check_sub_callback(call: types.CallbackQuery):
            if await self.sub_checker.check_subscription(call.from_user.id):
                await call.message.delete()
                await call.message.answer(
                    "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                    reply_markup=self.get_main_menu(),
                    parse_mode="HTML"
                )
            else:
                await call.answer(
                    "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.",
                    show_alert=True
                )

    def run(self):
        self.register_handlers()
        from aiogram import executor
        executor.start_polling(
            self.dp,
            on_startup=self.on_startup,
            on_shutdown=self.on_shutdown,
            skip_updates=True
        )

if __name__ == '__main__':
    bot = AnimeBot()
    bot.run()
