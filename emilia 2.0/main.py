import logging
import asyncio
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import RetryAfter, NetworkError
from config import BOT_TOKEN, CHANNEL_ID, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AnimeBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
        self.storage = MemoryStorage()
        self.dp = Dispatcher(self.bot, storage=self.storage)
        
        # –ñ–∞–Ω—Ä—ã
        self.sfw_genres = ["waifu", "neko", "shinobu", "megumin", "awoo", "smug", "bonk", "yeet", "blush", "wave"]
        self.nsfw_genres = ["waifu", "neko", "trap", "blowjob", "cum", "lesbian", "anal", "boobs", "pussy"]
        
        self.nsfw_enabled = False
        self.session = None
        self.user_data = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.stats = {
            'total_requests': 0,
            'active_users': set(),
            'start_time': datetime.now()
        }
        self.premium_users = set()  # ID –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.channel_id = CHANNEL_ID  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏

    async def on_startup(self, dp):
        self.session = aiohttp.ClientSession()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    async def on_shutdown(self, dp):
        await self.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_main_menu(self):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        genres_to_show = self.nsfw_genres if self.nsfw_enabled else self.sfw_genres
        for genre in genres_to_show:
            keyboard.add(KeyboardButton(genre.capitalize()))
            
        nsfw_text = "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW" if self.nsfw_enabled else "üîû –í–∫–ª—é—á–∏—Ç—å NSFW"
        keyboard.add(KeyboardButton(nsfw_text))
        keyboard.add(KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é"))
        keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        return keyboard

    async def check_subscription(self, user_id):
        try:
            member = await self.bot.get_chat_member(chat_id=self.channel_id, user_id=user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def get_waifu_image(self, genre: str):
        try:
            category = 'nsfw' if self.nsfw_enabled else 'sfw'
            url = f"https://api.waifu.pics/{category}/{genre.lower()}"
            
            async with self.session.get(url, timeout=5) as response:
                if response.status != 200:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None
                
                data = await response.json()
                return data['url']
                
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")
            return None

    def register_handlers(self):
        @self.dp.message_handler(commands=['start', 'menu'])
        async def cmd_start(message: types.Message):
            user_id = message.from_user.id
            self.stats['active_users'].add(user_id)
            
            if not await self.check_subscription(user_id):
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{self.channel_id}"))
                keyboard.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
                await message.answer("üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!", reply_markup=keyboard)
                return
                
            await message.answer(
                "üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–º–∏–ª–∏—é!\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                reply_markup=self.get_main_menu()
            )

        @self.dp.callback_query_handler(lambda c: c.data == "check_sub")
        async def check_sub_callback(callback_query: types.CallbackQuery):
            if await self.check_subscription(callback_query.from_user.id):
                await callback_query.message.delete()
                await self.bot.send_message(
                    callback_query.from_user.id,
                    "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                    reply_markup=self.get_main_menu()
                )
            else:
                await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

        @self.dp.message_handler(lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é")
        async def refresh_menu(message: types.Message):
            await cmd_start(message)

        @self.dp.message_handler(lambda m: m.text in ["üîû –í–∫–ª—é—á–∏—Ç—å NSFW", "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW"])
        async def toggle_nsfw(message: types.Message):
            self.nsfw_enabled = not self.nsfw_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if self.nsfw_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await message.answer(
                f"NSFW —Ä–µ–∂–∏–º {status}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                reply_markup=self.get_main_menu()
            )

        @self.dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        async def show_stats(message: types.Message):
            if message.from_user.id != ADMIN_ID:
                await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                return
                
            uptime = datetime.now() - self.stats['start_time']
            stats_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
                f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['active_users'])}\n"
                f"üîÑ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']}\n"
                f"üíé –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.premium_users)}"
            )
            await message.answer(stats_text)

        @self.dp.message_handler()
        async def handle_genre(message: types.Message):
            user_id = message.from_user.id
            self.stats['total_requests'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if not await self.check_subscription(user_id):
                await cmd_start(message)
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if user_id not in self.premium_users:
                current_time = datetime.now()
                last_request = self.user_data.get(user_id, {}).get('last_request')
                
                if last_request and (current_time - last_request).seconds < 30:
                    await message.answer("‚è≥ –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                if user_id not in self.user_data:
                    self.user_data[user_id] = {}
                self.user_data[user_id]['last_request'] = current_time
            
            current_genres = self.nsfw_genres if self.nsfw_enabled else self.sfw_genres
            genre = message.text.lower()
            
            if genre not in [g.lower() for g in current_genres]:
                await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –º–µ–Ω—é")
                return
            
            image_url = await self.get_waifu_image(genre)
            
            if not image_url:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            await message.answer_photo(
                image_url,
                caption=f"–í–∞—à {genre} –∞—Ä—Ç! (NSFW: {'–¥–∞' if self.nsfw_enabled else '–Ω–µ—Ç'})",
                reply_markup=self.get_main_menu()
            )

    def run(self):
        self.register_handlers()
        executor.start_polling(
            self.dp,
            on_startup=self.on_startup,
            on_shutdown=self.on_shutdown,
            skip_updates=True,
            relax=1,
            timeout=20
        )

if __name__ == '__main__':
    bot = AnimeBot()
    bot.run()
