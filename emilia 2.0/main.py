import logging
import aiohttp
import json
import random
import sys
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.utils import exceptions
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, CHANNEL_ID, CHANNEL_LINK, USER_CATEGORIES, SCROLLLER_MAPPING

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class InstanceLocker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
    def __init__(self):
        self.lock_file = "bot.lock"
        self.lock = None

    def __enter__(self):
        if os.path.exists(self.lock_file):
            logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª bot.lock –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            sys.exit(1)
        open(self.lock_file, 'w').close()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if os.path.exists(self.lock_file):
            os.remove(self.lock_file)

class SubscriptionManager:
    def __init__(self, bot):
        self.bot = bot
        self.sub_cache = {}

    async def check_subscription(self, user_id: int) -> bool:
        try:
            if user_id in self.sub_cache:
                return self.sub_cache[user_id]
            
            member = await self.bot.get_chat_member(CHANNEL_ID, user_id)
            result = member.status not in ['left', 'kicked']
            self.sub_cache[user_id] = result
            return result
            
        except exceptions.BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def request_subscription(self, message: types.Message):
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK),
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
        )
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
            f"{CHANNEL_LINK}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏",
            reply_markup=markup,
            disable_web_page_preview=True
        )

class ScrolllerAPI:
    def __init__(self):
        self.session = aiohttp.ClientSession()
        self.headers = {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }

    async def fetch_content(self, subreddit: str):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        query = {
            "query": """query SubredditQuery($url: String!) {
                getSubreddit(url: $url) {
                    children(limit: 30, iterator: null) {
                        items {
                            mediaSources {
                                url
                                type
                            }
                            title
                            url
                        }
                    }
                }
            }""",
            "variables": {"url": f"/r/{subreddit}"}
        }

        for attempt in range(3):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1} –¥–ª—è {subreddit}")
                async with self.session.post(
                    "https://api.scrolller.com/api/v2/graphql",
                    json=query,
                    headers=self.headers,
                    timeout=10
                ) as response:
                    
                    if response.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                        continue
                    
                    raw_data = await response.text()
                    data = json.loads(raw_data)
                    content = self.parse_content(data, subreddit)
                    
                    if content: 
                        return content
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Scrolller: {str(e)}")
        
        return None

    def parse_content(self, data: dict, subreddit: str) -> list:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        try:
            items = data.get('data', {}).get('getSubreddit', {}).get('children', {}).get('items', [])
            valid_posts = []
            
            for item in items:
                try:
                    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞
                    media = [
                        m['url'] for m in item.get('mediaSources', [])
                        if m.get('type') in ['IMAGE', 'GIF']
                        and any(ext in m['url'].lower() for ext in ['.jpg', '.jpeg', '.png', '.gif'])
                    ]
                    
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    if not media:
                        media = [item.get('url')] if any(x in item.get('url', '') for x in ['i.redd.it', 'imgur.com']) else []
                    
                    if media:
                        valid_posts.append({
                            'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'media': media,
                            'url': item.get('url', '')
                        })
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞: {str(e)}")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(valid_posts)} –ø–æ—Å—Ç–æ–≤ –≤ {subreddit}")
            return valid_posts
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            return []

class AnimeBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(self.bot)
        self.sub_manager = SubscriptionManager(self.bot)
        self.scrolller = ScrolllerAPI()

    async def shutdown(self, _):
        await self.scrolller.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def generate_menu(self):
        markup = InlineKeyboardMarkup(row_width=1)
        for category in USER_CATEGORIES:
            btn_text = f"{category} {'üîì' if USER_CATEGORIES[category]['nsfw'] else 'üîí'}"
            markup.add(InlineKeyboardButton(btn_text, callback_data=f"cat_{category}"))
        return markup

    async def send_content(self, message: types.Message, subreddit: str):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            if not await self.sub_manager.check_subscription(message.from_user.id):
                await self.sub_manager.request_subscription(message)
                return

            loading_msg = await message.answer("üîÑ –ò—â–µ–º –ª—É—á—à–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
            content = await self.scrolller.fetch_content(subreddit)
            
            if not content:
                await loading_msg.edit_text(
                    "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                )
                return

            post = random.choice(content)
            if not post.get('media'):
                raise ValueError("–ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞")

            await message.answer_photo(
                photo=post['media'][0],
                caption=f"üé¥ {post['title']}\nüîó {post['url']}",
                reply_markup=self.generate_menu()
            )
            await loading_msg.delete()
            
        except exceptions.RetryAfter as e:
            await asyncio.sleep(e.timeout)
            await self.send_content(message, subreddit)
            
        except exceptions.TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {str(e)}")
            await loading_msg.edit_text("‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            await loading_msg.edit_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    def register_handlers(self):
        @self.dp.message_handler(commands=['start', 'menu'])
        async def cmd_start(message: types.Message):
            if await self.sub_manager.check_subscription(message.from_user.id):
                await message.answer("üèÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=self.generate_menu())
            else:
                await self.sub_manager.request_subscription(message)

        @self.dp.callback_query_handler(lambda c: c.data.startswith('cat_'))
        async def handle_category(callback: types.CallbackQuery):
            category_name = callback.data[4:]
            category = USER_CATEGORIES.get(category_name)
            
            if not category:
                await callback.answer("‚ö† –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
                return

            markup = InlineKeyboardMarkup(row_width=1)
            for sub_name, sub_list in category["–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"].items():
                for key in sub_list:
                    tech_name = SCROLLLER_MAPPING.get(key)
                    if tech_name:
                        markup.add(InlineKeyboardButton(sub_name, callback_data=f"sub_{tech_name}"))
            
            markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
            await callback.message.edit_text(
                f"üìÇ {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                reply_markup=markup
            )

        @self.dp.callback_query_handler(lambda c: c.data.startswith('sub_'))
        async def handle_subcategory(callback: types.CallbackQuery):
            subreddit = callback.data[4:]
            await self.send_content(callback.message, subreddit)

        @self.dp.callback_query_handler(text="check_sub")
        async def check_sub(callback: types.CallbackQuery):
            if await self.sub_manager.check_subscription(callback.from_user.id):
                await callback.message.delete()
                await callback.message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!", reply_markup=self.generate_menu())
            else:
                await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!", show_alert=True)

        @self.dp.callback_query_handler(text="back_main")
        async def back_main(callback: types.CallbackQuery):
            await callback.message.edit_text("üèÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=self.generate_menu())

if __name__ == '__main__':
    with InstanceLocker():
        bot = AnimeBot()
        bot.register_handlers()
        executor.start_polling(
            bot.dp,
            on_shutdown=bot.shutdown,
            skip_updates=True,
            timeout=60
        )
