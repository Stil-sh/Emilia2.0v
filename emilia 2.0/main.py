import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, ADMIN_ID
import aiohttp
import sqlite3
from time import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
bot = Bot(token=BOT_TOKEN, timeout=30)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–ª—è API
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å WAL-—Ä–µ–∂–∏–º–æ–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
conn = sqlite3.connect('users.db', check_same_thread=False)
conn.execute('PRAGMA journal_mode=WAL')  # –£–ª—É—á—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ë–î
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY, 
                   nsfw_enabled BOOLEAN DEFAULT FALSE)''')
conn.commit()

# –ñ–∞–Ω—Ä—ã
SFW_GENRES = {
    "waifu": "–î–µ–≤—É—à–∫–∏", 
    "neko": "–ù–µ–∫–æ",
    "shinobu": "–®–∏–Ω–æ–±—É",
    "megumin": "–ú–µ–≥—É–º–∏–Ω"
}

NSFW_GENRES = {
    "waifu": "–î–µ–≤—É—à–∫–∏ (18+)",
    "neko": "–ù–µ–∫–æ (18+)",
    "trap": "–¢—Ä–∞–ø (18+)",
    "blowjob": "–ë–î–°–ú (18+)"
}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboard_cache = {}

def get_main_keyboard(user_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cache_key = f"keyboard_{user_id}"
    if cache_key in keyboard_cache:
        return keyboard_cache[cache_key]
    
    cursor.execute('SELECT nsfw_enabled FROM users WHERE user_id = ?', (user_id,))
    nsfw_status = cursor.fetchone()[0] if cursor.fetchone() else False
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    genres = NSFW_GENRES if nsfw_status else SFW_GENRES
    for genre, label in genres.items():
        keyboard.insert(InlineKeyboardButton(label, callback_data=f"genre_{genre}"))
    
    mode_button = InlineKeyboardButton(
        "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW" if nsfw_status else "üîû –í–∫–ª—é—á–∏—Ç—å NSFW", 
        callback_data="toggle_nsfw"
    )
    keyboard.add(mode_button)
    keyboard.add(InlineKeyboardButton("üìù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="t.me/username"))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    keyboard_cache[cache_key] = keyboard
    return keyboard

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def get_image(genre, nsfw=False, retries=3):
    category = "nsfw" if nsfw else "sfw"
    timeout = aiohttp.ClientTimeout(total=10)  # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
    
    for attempt in range(retries):
        try:
            start_time = time()
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(f"https://api.waifu.pics/{category}/{genre}") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        logger.info(f"Image loaded in {time()-start_time:.2f}s")
                        return data['url']
                    else:
                        logger.warning(f"API status {resp.status}, attempt {attempt+1}")
        except Exception as e:
            logger.warning(f"Attempt {attempt+1} failed: {str(e)}")
            if attempt == retries - 1:
                return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    try:
        cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
        conn.commit()
        await message.answer("üéå –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=get_main_keyboard(user_id))
    except Exception as e:
        logger.error(f"Start error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query_handler(lambda call: call.data.startswith('genre_'))
async def send_image(call: types.CallbackQuery):
    user_id = call.from_user.id
    genre = call.data.split('_')[1]
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await call.answer("–ó–∞–≥—Ä—É–∑–∫–∞...", cache_time=5)
        
        cursor.execute('SELECT nsfw_enabled FROM users WHERE user_id = ?', (user_id,))
        nsfw_status = cursor.fetchone()[0] if cursor.fetchone() else False
        
        image_url = await get_image(genre, nsfw_status)
        if image_url:
            await bot.send_photo(user_id, image_url, reply_markup=get_main_keyboard(user_id))
        else:
            await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"Send image error: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query_handler(lambda call: call.data == 'toggle_nsfw')
async def toggle_nsfw(call: types.CallbackQuery):
    user_id = call.from_user.id
    try:
        cursor.execute('SELECT nsfw_enabled FROM users WHERE user_id = ?', (user_id,))
        current_status = cursor.fetchone()[0] if cursor.fetchone() else False
        
        if not current_status:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await call.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            msg = await bot.send_message(
                user_id,
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚úÖ –ú–Ω–µ –µ—Å—Ç—å 18", callback_data="confirm_age"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_age")
                )
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        cursor.execute('UPDATE users SET nsfw_enabled = ? WHERE user_id = ?', (not current_status, user_id))
        conn.commit()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cache_key = f"keyboard_{user_id}"
        if cache_key in keyboard_cache:
            del keyboard_cache[cache_key]
            
        await call.message.edit_reply_markup(get_main_keyboard(user_id))
    except Exception as e:
        logger.error(f"Toggle NSFW error: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query_handler(lambda call: call.data == 'confirm_age')
async def confirm_age(call: types.CallbackQuery):
    try:
        user_id = call.from_user.id
        cursor.execute('UPDATE users SET nsfw_enabled = TRUE WHERE user_id = ?', (user_id,))
        conn.commit()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        cache_key = f"keyboard_{user_id}"
        if cache_key in keyboard_cache:
            del keyboard_cache[cache_key]
        
        await call.message.delete()
        await call.message.answer("–†–µ–∂–∏–º NSFW –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=get_main_keyboard(user_id))
    except Exception as e:
        logger.error(f"Confirm age error: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query_handler(lambda call: call.data == 'cancel_age')
async def cancel_age(call: types.CallbackQuery):
    try:
        await call.message.delete()
        await call.message.answer("–î–æ—Å—Ç—É–ø –∫ NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=get_main_keyboard(call.from_user.id))
    except Exception as e:
        logger.error(f"Cancel age error: {e}")

if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
