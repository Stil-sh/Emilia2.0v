import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import RetryAfter, NetworkError
from datetime import datetime
import sqlite3
from config import BOT_TOKEN, CHANNEL_ID, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_stats.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY, 
                   username TEXT,
                   first_name TEXT,
                   last_name TEXT,
                   join_date TEXT,
                   is_premium INTEGER DEFAULT 0)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS stats
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   command TEXT,
                   timestamp TEXT)''')
conn.commit()

class AnimeBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
        self.storage = MemoryStorage()
        self.dp = Dispatcher(self.bot, storage=self.storage)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.sfw_genres = ["waifu", "neko", "shinobu", "megumin", "awoo", "smug", "bonk", "yeet", 
                          "blush", "wave", "highfive", "handhold", "nom", "bite", "glomp", "slap"]
        
        self.nsfw_genres = ["waifu", "neko", "trap", "blowjob", "cum", "les", "solo", "anal", 
                           "holo", "ero", "feet", "yuri", "thighs", "pussy", "futanari"]
        
        self.premium_genres = ["maid", "marin-kitagawa", "raiden-shogun", "oppai", "selfies", "uniform"]
        
        self.nsfw_enabled = False
        self.session = None
        self.channel_id = CHANNEL_ID
        self.admin_id = ADMIN_ID

    async def on_startup(self, dp):
        self.session = aiohttp.ClientSession()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        await self.bot.send_message(self.admin_id, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    async def on_shutdown(self, dp):
        await self.session.close()
        conn.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await self.bot.send_message(self.admin_id, "ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def check_subscription(self, user_id):
        try:
            member = await self.bot.get_chat_member(self.channel_id, user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def save_user(self, user: types.User):
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, join_date) VALUES (?, ?, ?, ?, ?)",
                      (user.id, user.username, user.first_name, user.last_name, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()

    async def log_command(self, command):
        cursor.execute("INSERT INTO stats (command, timestamp) VALUES (?, ?)",
                      (command, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()

    async def get_stats(self):
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM stats WHERE command='start'")
        total_starts = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM stats WHERE date(timestamp) = date('now')")
        daily_active = cursor.fetchone()[0]
        
        return {
            "total_users": total_users,
            "total_starts": total_starts,
            "daily_active": daily_active
        }

    def get_main_menu(self, user_id=None):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        is_premium = False
        if user_id:
            cursor.execute("SELECT is_premium FROM users WHERE user_id=?", (user_id,))
            result = cursor.fetchone()
            is_premium = result[0] if result else False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∂–∞–Ω—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        genres_to_show = self.nsfw_genres if self.nsfw_enabled else self.sfw_genres
        if is_premium:
            genres_to_show += self.premium_genres
            
        for genre in genres_to_show:
            keyboard.add(KeyboardButton(genre.capitalize()))
            
        nsfw_text = "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW" if self.nsfw_enabled else "üîû –í–∫–ª—é—á–∏—Ç—å NSFW"
        keyboard.add(KeyboardButton(nsfw_text))
        
        if not is_premium:
            keyboard.add(KeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º"))
            
        keyboard.add(KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        return keyboard

    async def get_waifu_image(self, genre: str):
        try:
            category = 'nsfw' if self.nsfw_enabled else 'sfw'
            url = f"https://api.waifu.pics/{category}/{genre.lower()}"
            
            async with self.session.get(url, timeout=5) as response:
                if response.status != 200:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None
                
                data = await response.json()
                return data['url']
                
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")
            return None

    def register_handlers(self):
        @self.dp.message_handler(commands=['start', 'menu'])
        async def cmd_start(message: types.Message):
            try:
                await self.save_user(message.from_user)
                await self.log_command('start')
                
                if not await self.check_subscription(message.from_user.id):
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{self.channel_id}"))
                    keyboard.add(InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
                    
                    await message.answer(
                        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
                        reply_markup=keyboard
                    )
                    return
                
                await message.answer(
                    "üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–º–∏–ª–∏—é!\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                    reply_markup=self.get_main_menu(message.from_user.id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")

        @self.dp.callback_query_handler(lambda c: c.data == "check_sub")
        async def check_subscription_callback(callback_query: types.CallbackQuery):
            if await self.check_subscription(callback_query.from_user.id):
                await callback_query.message.delete()
                await self.bot.send_message(
                    callback_query.from_user.id,
                    "üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–º–∏–ª–∏—é!\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                    reply_markup=self.get_main_menu(callback_query.from_user.id)
                )
            else:
                await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

        @self.dp.message_handler(lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é")
        async def refresh_menu(message: types.Message):
            await cmd_start(message)

        @self.dp.message_handler(lambda m: m.text in ["üîû –í–∫–ª—é—á–∏—Ç—å NSFW", "üîû –í—ã–∫–ª—é—á–∏—Ç—å NSFW"])
        async def toggle_nsfw(message: types.Message):
            self.nsfw_enabled = not self.nsfw_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if self.nsfw_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await message.answer(
                f"NSFW —Ä–µ–∂–∏–º {status}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                reply_markup=self.get_main_menu(message.from_user.id)
            )

        @self.dp.message_handler(lambda m: m.text == "üíé –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
        async def get_premium(message: types.Message):
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="buy_premium"))
            
            await message.answer(
                "üíé –ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏:\n"
                "- –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
                "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü",
                reply_markup=keyboard
            )

        @self.dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        async def show_stats(message: types.Message):
            if message.from_user.id != self.admin_id:
                await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                return
                
            stats = await self.get_stats()
            await message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                f"üöÄ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {stats['total_starts']}\n"
                f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['daily_active']}"
            )

        @self.dp.message_handler()
        async def handle_genre(message: types.Message):
            try:
                await self.log_command('genre_request')
                
                if not await self.check_subscription(message.from_user.id):
                    await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
                cursor.execute("SELECT is_premium FROM users WHERE user_id=?", (message.from_user.id,))
                result = cursor.fetchone()
                is_premium = result[0] if result else False
                
                current_genres = (self.nsfw_genres + (self.premium_genres if is_premium else [])) if self.nsfw_enabled else (self.sfw_genres + (self.premium_genres if is_premium else []))
                genre = message.text.lower()
                
                if genre not in [g.lower() for g in current_genres]:
                    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –º–µ–Ω—é")
                    return
                
                image_url = await self.get_waifu_image(genre)
                
                if not image_url:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return
                
                await message.answer_photo(
                    image_url,
                    caption=f"–í–∞—à {genre} –∞—Ä—Ç! (NSFW: {'–¥–∞' if self.nsfw_enabled else '–Ω–µ—Ç'})",
                    reply_markup=self.get_main_menu(message.from_user.id)
                )
                
            except RetryAfter as e:
                await asyncio.sleep(e.timeout)
                await handle_genre(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–Ω—Ä–∞: {str(e)}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

    def run(self):
        self.register_handlers()
        executor.start_polling(
            self.dp,
            on_startup=self.on_startup,
            on_shutdown=self.on_shutdown,
            skip_updates=True,
            relax=1,
            timeout=20
        )

if __name__ == '__main__':
    bot = AnimeBot()
    bot.run()
